using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using DynamicConnections.CRM2011.Common.Utility;

using System.ServiceModel;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using DynamicConnections.NutriStyle.CRM2011.MenuGenerator;

namespace DynamicConnections.NutriStyle.CRM2011.MenuGenerator.Wrappers
{
    public class MealFoodWrapper : General, IComparable<MealFoodWrapper>
    {

        public MealFoodWrapper() {
            IsFavorite = false;
        }

        public MealFoodWrapper(Entity mealFood, Entity food) {
            this.MealFood = mealFood;
            this.Food = food;
        }

        public Entity MealFood  { get; set; }
        public Entity Food      { get; set; }
        public Guid Category    { get; set; }
        public String Name      { get; set; }

        public decimal ProteinRatio         { get; set; }
        public decimal FatRatio             { get; set; }
        public decimal CarbohydrateRatio    { get; set; }

        public Guid Id                      { get; set; }
        public bool IsFavorite              { get; set; }
        
        public int CompareTo(MealFoodWrapper mfw)
        {
            return this.CompareTo(mfw);
        }
        /// <summary>
        /// Perform deep copy
        /// </summary>
        /// <returns></returns>
        public static MealFoodWrapper Copy(MealFoodWrapper current)
        {
            MealFoodWrapper mfw = new MealFoodWrapper();
            mfw.MealFood = new Entity("dc_mealfood");
            mfw.Food = new Entity("dc_foods");
            mfw.Category = current.Category;
            mfw.Name = current.Name;
            mfw.ProteinRatio = current.ProteinRatio;
            mfw.FatRatio = current.FatRatio;
            mfw.CarbohydrateRatio = current.CarbohydrateRatio;
            mfw.Id = current.Id;
            mfw.IsFavorite = current.IsFavorite;

            //Deep entity copy
            foreach (KeyValuePair<String, object> at in current.MealFood.Attributes)
            {
                
                mfw.MealFood.Attributes.Add(at);
            }
            foreach (KeyValuePair<String, object> at in current.Food.Attributes)
            {
                mfw.Food.Attributes.Add(at);
            }
            return (mfw);
        }
        /// <summary>
        /// Performs deep copy of list.  Returns new list
        /// </summary>
        /// <param name="list"></param>
        /// <returns></returns>
        public static List<MealFoodWrapper> Copy(List<MealFoodWrapper> list)
        {
            List<MealFoodWrapper> newList = new List<MealFoodWrapper>();
            foreach (MealFoodWrapper mfw2 in list)
            {
                newList.Add(MealFoodWrapper.Copy(mfw2));
            }
            return (newList);
        }
    }
    public class ProteinRatioSort : IComparer<MealFoodWrapper>
    {
        public int Compare(MealFoodWrapper obj1, MealFoodWrapper obj2)
        {
            return obj2.ProteinRatio.CompareTo(obj1.ProteinRatio);
        }
    }
    public class FatRatioSort : IComparer<MealFoodWrapper>
    {
        public int Compare(MealFoodWrapper obj1, MealFoodWrapper obj2)
        {
            return obj2.FatRatio.CompareTo(obj1.FatRatio);
        }
    }
    public class CarbohydrateRatioSort : IComparer<MealFoodWrapper>
    {
        public int Compare(MealFoodWrapper obj1, MealFoodWrapper obj2)
        {
            return obj2.CarbohydrateRatio.CompareTo(obj1.CarbohydrateRatio);
        }
    }
    
}
