using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using DynamicConnections.NutriStyle.MenuGenerator.Engine.Helpers;
using System.Xml.Linq;
using System.Globalization;
using DynamicConnections.NutriStyle.MenuGenerator.Controls;

namespace DynamicConnections.NutriStyle.MenuGenerator
{
    public partial class App : Application
    {
        public enum GramToKcalMultipler { Carbohydrate = 4, Fat = 9, Protein = 4 }
        public Contact contact;

        public String contactId;
        public decimal kcalCalculatedTarget = 0m;
        public SolidColorBrush borderColor = new SolidColorBrush(Color.FromArgb(255, 189, 217, 224));
        public decimal weightInKilos;

        public Dictionary<String, int> dayList          = new Dictionary<string, int>();
        public Dictionary<String, int> mealList         = new Dictionary<string, int>();

        public List<PairWithList> physicalActivityCategory = new List<PairWithList>();

        public List<BarChartData> listBurned            = new List<BarChartData>();
        public List<BarChartData> listConsumed          = new List<BarChartData>();
        public List<BarChartData> activityLevelConsumed = new List<BarChartData>();
        public List<PairWithList> activityLevel         = new List<PairWithList>();

        public List<PairWithList> countries             = new List<PairWithList>();
        public List<PairWithList> groceries             = new List<PairWithList>();
        public List<PairWithList> HeightFeet            = new List<PairWithList>();
        public List<PairWithList> HeightInches          = new List<PairWithList>();
        public List<PairWithList> ActivityLevel         = new List<PairWithList>();
        public List<PairWithList> PoundsPerWeek         = new List<PairWithList>();
        public List<PairWithList> PortionTypes          = new List<PairWithList>();

        public List<PairWithList> FoodGroups            = new List<PairWithList>();

        public Engine.FormData.ActivityLog activityLog  = new Engine.FormData.ActivityLog();

        public Dictionary<String, XElement> metadataList= new Dictionary<string, XElement>();

        //RetrieveActivityLevel
        //public List<BarChartData> listMacro = new List<BarChartData>();
        //public List<BarChartData> listKcal = new List<BarChartData>();

        SyncRun SR;
        
        public static String Height     = "height=600";
        public static String Width      = "width=800";

        public String webServicesName   = "WebServicesSoapDEV";

        public FitnessChart fc;
        public MacroChart   mc;

        public App()
        {
            SR = new SyncRun();
            this.Startup += this.Application_Startup;
            this.Exit += this.Application_Exit;
            this.UnhandledException += this.Application_UnhandledException;
            weightInKilos = 0;
            InitializeComponent();
            if (!Application.Current.Host.Source.AbsoluteUri.ToUpper().Contains("DEV"))
            {
                webServicesName = "WebServicesSoap";
            }

            if (Application.Current.Host.Source.AbsoluteUri.StartsWith("file"))
            {
                webServicesName = "WebServicesSoapDEV";
            }

            DateTime currentDate = DateTime.Now;
            activityLog = new Engine.FormData.ActivityLog();
            //get to sunday
            int dayOfWeek = (int)currentDate.DayOfWeek;
            var dtf = CultureInfo.CurrentCulture.DateTimeFormat;

            currentDate = currentDate.AddDays(-dayOfWeek);
            for (int x = 0; x < 7; x++)
            {
                String dayName = dtf.GetAbbreviatedDayName(currentDate.AddDays(x).DayOfWeek);
                listBurned.Add(new BarChartData(dayName, 0m));
                listConsumed.Add(new BarChartData(dayName, 0m));
                activityLevelConsumed.Add(new BarChartData(dayName, 0m));

                activityLog.Burned.Add(new BarChartData(dayName, 0m));
                activityLog.Consumed.Add(new BarChartData(dayName, 0m));
                activityLog.Difference.Add(new BarChartData(dayName, 0m));
                /*
                activityLog.SetBurned(dayName, 0m);
                activityLog.SetConsumed(dayName, 0m);
                */
            }
        }

        private void Application_Startup(object sender, StartupEventArgs e)
        {
            SR.FinalAsync(Ready);
            SR.MultipleAsyncRun(RetrieveDays);
            SR.MultipleAsyncRun(RetrieveMeals);
            SR.MultipleAsyncRun(RetrievePhysicalActivityCategories);
            SR.MultipleAsyncRun(RetrieveGroceries);
            SR.MultipleAsyncRun(RetrieveCountries);
            SR.MultipleAsyncRun(RetrieveHeightFeet);
            SR.MultipleAsyncRun(RetrieveHeightInches);
            SR.MultipleAsyncRun(RetrieveActivityLevel);
            SR.MultipleAsyncRun(RetrievePoundsPerWeek);
            SR.MultipleAsyncRun(RetrievePortionTypes);

            SR.MultipleAsyncRun(RetrieveFoodGroups);


            RetrieveMetadata("dc_foods");
            RetrieveMetadata("dc_food_nutrients");
            RetrieveMetadata("dc_ingredient");
        }

        private void Application_Exit(object sender, EventArgs e)
        {
        }


        private void RetrieveMetadata(String entityName)
        {

            CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
            cms.RetrieveMetadataCompleted += new EventHandler<CrmSdk.RetrieveMetadataCompletedEventArgs>(cms_RetrieveMetadata);
            cms.RetrieveMetadataAsync(entityName);
        }
        private void cms_RetrieveMetadata(object sender, CrmSdk.RetrieveMetadataCompletedEventArgs e)
        {
            try
            {
                var element = e.Result;
                //Retrieve Entity Name
                var entityNameXml = from x in e.Result.Descendants("EntityLogicalName") select x;
                
                String entityName = entityNameXml.First().Value;
                if (!String.IsNullOrEmpty(entityName) && !metadataList.ContainsKey(entityName))
                {
                    metadataList.Add(entityName, element);
                }
                //MessageBox.Show(General.RetrieveAttributeLabelName("dc_name", element));
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }





        private void RetrievePoundsPerWeek()
        {

            CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
            cms.RetrieveOptionSetValuesCompleted += new EventHandler<CrmSdk.RetrieveOptionSetValuesCompletedEventArgs>(cms_RetrievePoundsPerWeek);
            cms.RetrieveOptionSetValuesAsync("contact", "dc_poundsperweek");

            cms.RetrieveOptionSetValuesCompleted += (s, e) => { SR.AssignResultCheckforAllAsyncsDone(e, e.Result, "Acquisition failure for Pounds Per Week"); };

        }
        private void cms_RetrievePoundsPerWeek(object sender, CrmSdk.RetrieveOptionSetValuesCompletedEventArgs e)
        {
            try
            {
                ComboBoxItem itemSelected = new ComboBoxItem();
                List<PairWithList> list = new List<PairWithList>();
                var results = from x in e.Result.Descendants("pair") select x;
                PairWithList pSet = new PairWithList();
                foreach (var pair in results)
                {
                    PairWithList p = new PairWithList();
                    p.Name = pair.Descendants("name").First().Value;
                    p.Id = pair.Descendants("value").First().Value;

                    PoundsPerWeek.Add(p);
                   
                }
                
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }
        private void RetrieveFoodGroups()
        {

            CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
            cms.RetrieveOptionSetValuesCompleted += new EventHandler<CrmSdk.RetrieveOptionSetValuesCompletedEventArgs>(cms_RetrieveFoodGroups);
            cms.RetrieveOptionSetValuesAsync("dc_foods", "dc_foodgroup");

            cms.RetrieveOptionSetValuesCompleted += (s, e) => { SR.AssignResultCheckforAllAsyncsDone(e, e.Result, "Acquisition failure for Food Group"); };

        }
        private void cms_RetrieveFoodGroups(object sender, CrmSdk.RetrieveOptionSetValuesCompletedEventArgs e)
        {
            try
            {
                ComboBoxItem itemSelected = new ComboBoxItem();
                List<PairWithList> list = new List<PairWithList>();
                var results = from x in e.Result.Descendants("pair") select x;
                PairWithList pSet = new PairWithList();
                foreach (var pair in results)
                {
                    PairWithList p = new PairWithList();
                    p.Name = pair.Descendants("name").First().Value;
                    p.Id = pair.Descendants("value").First().Value;

                    FoodGroups.Add(p);

                }

            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }
        private void RetrieveActivityLevel()
        {

            CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
            cms.RetrieveOptionSetValuesCompleted += new EventHandler<CrmSdk.RetrieveOptionSetValuesCompletedEventArgs>(cms_RetrieveActivityLevel);
            cms.RetrieveOptionSetValuesAsync("contact", "dc_activitylevel");

            cms.RetrieveOptionSetValuesCompleted += (s, e) => { SR.AssignResultCheckforAllAsyncsDone(e, e.Result, "Acquisition failure for Activity Level"); };
        }
        private void cms_RetrieveActivityLevel(object sender, CrmSdk.RetrieveOptionSetValuesCompletedEventArgs e)
        {
            try
            {
                ComboBoxItem itemSelected = new ComboBoxItem();
                List<PairWithList> list = new List<PairWithList>();
                var results = from x in e.Result.Descendants("pair") select x;
                PairWithList pSet = new PairWithList();
                foreach (var pair in results)
                {
                    PairWithList p = new PairWithList();
                    p.Name = pair.Descendants("name").First().Value;
                    p.Id = pair.Descendants("value").First().Value;

                    ActivityLevel.Add(p);
                }
                
                //Need to cache this.
                ((App)App.Current).activityLevel = ActivityLevel;
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }
        private void RetrieveHeightInches()
        {

            CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
            cms.RetrieveOptionSetValuesCompleted += new EventHandler<CrmSdk.RetrieveOptionSetValuesCompletedEventArgs>(cms_RetrieveHeightInches);
            cms.RetrieveOptionSetValuesAsync("contact", "dc_heightinches");

            cms.RetrieveOptionSetValuesCompleted += (s, e) => { SR.AssignResultCheckforAllAsyncsDone(e, e.Result, "Acquisition failure for Height Inches"); };
        }
        private void cms_RetrieveHeightInches(object sender, CrmSdk.RetrieveOptionSetValuesCompletedEventArgs e)
        {
            try
            {
                ComboBoxItem itemSelected = new ComboBoxItem();
                List<PairWithList> list = new List<PairWithList>();
                var results = from x in e.Result.Descendants("pair") select x;
               
                foreach (var pair in results)
                {
                    PairWithList p = new PairWithList();
                    p.Name = pair.Descendants("name").First().Value;
                    p.Id = pair.Descendants("value").First().Value;

                    HeightInches.Add(p);
                }
               
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }
        private void RetrieveHeightFeet()
        {

            CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
            cms.RetrieveOptionSetValuesCompleted += new EventHandler<CrmSdk.RetrieveOptionSetValuesCompletedEventArgs>(cms_RetrieveHeightFeet);
            cms.RetrieveOptionSetValuesAsync("contact", "dc_heightfeet");

            cms.RetrieveOptionSetValuesCompleted += (s, e) => { SR.AssignResultCheckforAllAsyncsDone(e, e.Result, "Acquisition failure for Height Feet"); };
        }

        private void cms_RetrieveHeightFeet(object sender, CrmSdk.RetrieveOptionSetValuesCompletedEventArgs e)
        {
            ////CrmIndicator.IsBusy = true;
            try
            {
                ComboBoxItem itemSelected = new ComboBoxItem();
                
                var results = from x in e.Result.Descendants("pair") select x;
                
                foreach (var pair in results)
                {
                    PairWithList p = new PairWithList();
                    p.Name = pair.Descendants("name").First().Value;
                    p.Id = pair.Descendants("value").First().Value;

                    HeightFeet.Add(p);
                }
                
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }


        private void Ready()
        {
            this.RootVisual = new MainPage();
        }
        private void RetrieveGroceries()
        {
            String fetchXml = @"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>
                  <entity name='dc_grocer'>
                    <attribute name='dc_name' />
                    <attribute name='dc_grocerid' />
                    <order attribute='dc_name' descending='false' />
                  </entity>
                </fetch>";

            XElement orderXml = new XElement("ColumnOrder");
            orderXml.Add(new XElement("Column", "dc_name"));
            orderXml.Add(new XElement("Column", "dc_grocerid"));

            try
            {
                CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
                cms.RetrieveFetchXmlCompleted += new EventHandler<CrmSdk.RetrieveFetchXmlCompletedEventArgs>(cms_RetrieveGroceries);
                cms.RetrieveFetchXmlAsync(fetchXml, orderXml.ToString());
                cms.RetrieveFetchXmlCompleted += (s, e) => { SR.AssignResultCheckforAllAsyncsDone(e, e.Result, "Acquisition failure for Groceries"); };
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }
        private void cms_RetrieveGroceries(object sender, CrmSdk.RetrieveFetchXmlCompletedEventArgs e)
        {
            String entityName = "dc_grocer";
            var element = e.Result;

            try
            {
                if (element.Descendants(entityName).Count() > 0)
                {
                    //Bind data
                    var rows = element.Descendants(entityName);
                    foreach (var row in rows)
                    {
                        Row rowData = new Row();

                        String name = String.Empty;
                        String Id = String.Empty;
                        foreach (XElement xe in row.Elements())
                        {
                            if (xe.Name.LocalName.Equals("dc_name", StringComparison.OrdinalIgnoreCase))
                            {
                                name = xe.Value;
                            }
                            else if (xe.Name.LocalName.Equals(entityName + "id", StringComparison.OrdinalIgnoreCase))
                            {
                                Id = xe.Value;
                            }
                        }
                        groceries.Add(new PairWithList(name, Id));
                    }
                }
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }

        private void RetrieveCountries()
        {
            String fetchXml = @"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>
                  <entity name='dc_country'>
                    <attribute name='dc_name' />
                    <attribute name='dc_countryid' />
                    <order attribute='dc_name' descending='false' />
                  </entity>
                </fetch>";

            XElement orderXml = new XElement("ColumnOrder");
            orderXml.Add(new XElement("Column", "dc_name"));
            orderXml.Add(new XElement("Column", "dc_countryid"));

            try
            {
                CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
                cms.RetrieveFetchXmlCompleted += new EventHandler<CrmSdk.RetrieveFetchXmlCompletedEventArgs>(cms_RetrieveCountries);
                cms.RetrieveFetchXmlAsync(fetchXml, orderXml.ToString());
                cms.RetrieveFetchXmlCompleted += (s, e) => { SR.AssignResultCheckforAllAsyncsDone(e, e.Result, "Acquisition failure for countries"); };
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }
        private void cms_RetrieveCountries(object sender, CrmSdk.RetrieveFetchXmlCompletedEventArgs e)
        {
            String entityName = "dc_country";
            var element = e.Result;

            try
            {
                if (element.Descendants(entityName).Count() > 0)
                {
                    //Bind data
                    var rows = element.Descendants(entityName);
                    foreach (var row in rows)
                    {
                        Row rowData = new Row();

                        String name = String.Empty;
                        String Id = String.Empty;
                        foreach (XElement xe in row.Elements())
                        {
                            if (xe.Name.LocalName.Equals("dc_name", StringComparison.OrdinalIgnoreCase))
                            {
                                name = xe.Value;
                            }
                            else if (xe.Name.LocalName.Equals(entityName + "id", StringComparison.OrdinalIgnoreCase))
                            {
                                Id = xe.Value;
                            }
                        }
                        countries.Add(new PairWithList(name, Id));
                    }
                }
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }


        private void RetrievePhysicalActivityCategories()
        {
            String fetchXml = @"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>
                  <entity name='dc_physicalactivitycategory'>
                    <attribute name='dc_name' />
                    <attribute name='dc_physicalactivitycategoryid' />
                    <order attribute='dc_name' descending='false' />
                    <filter type='and'>
                      <condition attribute='statecode' operator='eq' value='0' />
                    </filter>
                  </entity>
                </fetch>";

            XElement orderXml = new XElement("ColumnOrder");
            orderXml.Add(new XElement("Column", "dc_name"));
            orderXml.Add(new XElement("Column", "dc_physicalactivitycategoryid"));

            try
            {
                CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
                cms.RetrieveFetchXmlCompleted += new EventHandler<CrmSdk.RetrieveFetchXmlCompletedEventArgs>(cms_RetrieveCategory);
                cms.RetrieveFetchXmlAsync(fetchXml, orderXml.ToString());
                cms.RetrieveFetchXmlCompleted += (s, e) => { SR.AssignResultCheckforAllAsyncsDone(e, e.Result, "Acquisition failure for physical activity categories"); };
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }
        private void cms_RetrieveCategory(object sender, CrmSdk.RetrieveFetchXmlCompletedEventArgs e)
        {
            String entityName   = "dc_physicalactivitycategory";
            var element         = e.Result;

            try
            {
                if (element.Descendants(entityName).Count() > 0)
                {
                    //Bind data
                    var rows = element.Descendants(entityName);
                    foreach (var row in rows)
                    {
                        Row rowData = new Row();

                        String name = String.Empty;
                        String Id = String.Empty;
                        foreach (XElement xe in row.Elements())
                        {
                            if (xe.Name.LocalName.Equals("dc_name", StringComparison.OrdinalIgnoreCase))
                            {
                                name = xe.Value;
                            }
                            else if (xe.Name.LocalName.Equals(entityName + "id", StringComparison.OrdinalIgnoreCase))
                            {
                                Id = xe.Value;
                            }
                        }
                        physicalActivityCategory.Add(new PairWithList(name, Id));
                    }
                }
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }

        private void RetrieveDays()
        {
            CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
            cms.RetrieveOptionSetValuesCompleted += new EventHandler<CrmSdk.RetrieveOptionSetValuesCompletedEventArgs>(cms_RetrieveDays);
            cms.RetrieveOptionSetValuesAsync("dc_foodlike", "dc_day");

            cms.RetrieveOptionSetValuesCompleted += (s, e) => { SR.AssignResultCheckforAllAsyncsDone(e, e.Result, "Acquisition failure for days"); };
        }
        private void cms_RetrieveDays(object sender, CrmSdk.RetrieveOptionSetValuesCompletedEventArgs e)
        {
            try
            {

                var results = from x in e.Result.Descendants("pair") select x;

                foreach (var pair in results)
                {
                    Pair p = new Pair();
                    p.Name = pair.Descendants("name").First().Value;
                    p.Id = pair.Descendants("value").First().Value;
                    dayList.Add(pair.Descendants("name").First().Value, Convert.ToInt32(pair.Descendants("value").First().Value));
                }
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }

        private void RetrieveMeals()
        {
            CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
            cms.RetrieveOptionSetValuesCompleted += new EventHandler<CrmSdk.RetrieveOptionSetValuesCompletedEventArgs>(cms_RetrieveMeals);
            cms.RetrieveOptionSetValuesAsync("dc_foodlog", "dc_meal");

            cms.RetrieveOptionSetValuesCompleted += (s, e) => { SR.AssignResultCheckforAllAsyncsDone(e, e.Result, "Acquisition failure for meals"); };
        }
        private void cms_RetrieveMeals(object sender, CrmSdk.RetrieveOptionSetValuesCompletedEventArgs e)
        {
            try
            {

                var results = from x in e.Result.Descendants("pair") select x;

                foreach (var pair in results)
                {
                    Pair p = new Pair();
                    p.Name = pair.Descendants("name").First().Value;
                    p.Id = pair.Descendants("value").First().Value;
                    mealList.Add(pair.Descendants("name").First().Value, Convert.ToInt32(pair.Descendants("value").First().Value));
                }
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }


        private void Application_UnhandledException(object sender, ApplicationUnhandledExceptionEventArgs e)
        {
            // If the app is running outside of the debugger then report the exception using
            // the browser's exception mechanism. On IE this will display it a yellow alert 
            // icon in the status bar and Firefox will display a script error.
            if (!System.Diagnostics.Debugger.IsAttached)
            {

                // NOTE: This will allow the application to continue running after an exception has been thrown
                // but not handled. 
                // For production applications this error handling should be replaced with something that will 
                // report the error to the website and stop the application.
                e.Handled = true;
                Deployment.Current.Dispatcher.BeginInvoke(delegate { ReportErrorToDOM(e); });
            }
        }

        private void ReportErrorToDOM(ApplicationUnhandledExceptionEventArgs e)
        {
            try
            {
                string errorMsg = e.ExceptionObject.Message + e.ExceptionObject.StackTrace;
                errorMsg = errorMsg.Replace('"', '\'').Replace("\r\n", @"\n");

                System.Windows.Browser.HtmlPage.Window.Eval("throw new Error(\"Unhandled Error in Silverlight Application " + errorMsg + "\");");
            }
            catch (Exception)
            {
            }
        }




        private void RetrievePortionTypes()
        {
            String fetchXml = @"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>
                  <entity name='dc_portion_types'>
                    <attribute name='dc_name' />
                    <attribute name='dc_portion_typesid' />
                    <order attribute='dc_name' descending='false' />
                    <filter type='and'>
                      <condition attribute='statecode' operator='eq' value='0' />
                    </filter>
                  </entity>
                </fetch>";

            XElement orderXml = new XElement("ColumnOrder");
            orderXml.Add(new XElement("Column", "dc_name"));
            orderXml.Add(new XElement("Column", "dc_portion_typesid"));

            try
            {
                CrmSdk.WebServicesSoapClient cms = new CrmSdk.WebServicesSoapClient(((App)App.Current).webServicesName);
                cms.RetrieveFetchXmlCompleted += new EventHandler<CrmSdk.RetrieveFetchXmlCompletedEventArgs>(cms_RetrievePortionTypes);
                cms.RetrieveFetchXmlAsync(fetchXml, orderXml.ToString());
                cms.RetrieveFetchXmlCompleted += (s, e) => { SR.AssignResultCheckforAllAsyncsDone(e, e.Result, "Acquisition failure for portion types"); };
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }
        private void cms_RetrievePortionTypes(object sender, CrmSdk.RetrieveFetchXmlCompletedEventArgs e)
        {
            String entityName = "dc_portion_types";
            var element = e.Result;

            try
            {
                if (element.Descendants(entityName).Count() > 0)
                {
                    //Bind data
                    var rows = element.Descendants(entityName);
                    foreach (var row in rows)
                    {
                        Row rowData = new Row();

                        String name = String.Empty;
                        String Id = String.Empty;
                        foreach (XElement xe in row.Elements())
                        {
                            if (xe.Name.LocalName.Equals("dc_name", StringComparison.OrdinalIgnoreCase))
                            {
                                name = xe.Value;
                            }
                            else if (xe.Name.LocalName.Equals(entityName + "id", StringComparison.OrdinalIgnoreCase))
                            {
                                Id = xe.Value;
                            }
                        }
                        PortionTypes.Add(new PairWithList(name, Id));
                    }
                }
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
                MessageBox.Show(err.StackTrace);
            }
        }
    }
}
