using System;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.Xml.Linq;
using System.Linq;
using System.Collections.Generic;

namespace DynamicConnections.NutriStyle.MenuGenerator.Engine.Helpers
{
    public class General
    {
        public static SolidColorBrush GetColorFromHexa(string hexaColor)
        {
            return new SolidColorBrush(
                Color.FromArgb(
                    Convert.ToByte(hexaColor.Substring(1, 2), 16),
                    Convert.ToByte(hexaColor.Substring(3, 2), 16),
                    Convert.ToByte(hexaColor.Substring(5, 2), 16),
                    Convert.ToByte(hexaColor.Substring(7, 2), 16)
                )
            );
        }

        public static DateTime ZeroOutDateHHMMSS(DateTime date)
        {
            return (new DateTime(date.Year, date.Month, date.Day));
        }

        public static DateTime RetrieveLastSunday(DateTime date)
        {

            int weekNumber = (int)date.DayOfWeek;
            DateTime dt = ZeroOutDateHHMMSS(date);

            return (date.AddDays(-weekNumber));
        }
        public static String ReportServerUrl(String endpoint)
        {
            if (endpoint.Equals("WebServicesSoapDEV", StringComparison.OrdinalIgnoreCase))
            {
                return ("http://crmdev.dynamiconnections.com/ReportServer/Pages/ReportViewer.aspx?/NSDEV_MSCRM");
            }
            else if (endpoint.Equals("WebServicesSoap", StringComparison.OrdinalIgnoreCase))
            {
                return ("http://crmdev.dynamiconnections.com/ReportServer/Pages/ReportViewer.aspx?/NS_MSCRM");
            }
            else
            {
                return (string.Empty);
            }
        }


        public static UserControl FindParrentUserControl(DependencyObject child, System.Type type)
        {
            DependencyObject parent = VisualTreeHelper.GetParent(child);
            if (parent == null)
            {
                return null;
            }
            else if (parent.GetType() == type)
            {
                return (UserControl)parent;
            }
            return FindParrentUserControl(parent, type);
        }

        public static String RetrieveAttributeLabelName(String attributeName, XElement metadata)
        {
            String label = String.Empty;
            //var labelXml    = from x in metadata.Descendants(attributeName) select x;
            //label           = labelXml.First().Value;
            var list    = from x in metadata.Element("Entity").Elements("Attributes").Elements("Attribute") where x.Element("LogicalName").Value == attributeName select x;
            if (list != null)
            {
                label = list.First().Descendants("DisplayName").First().Value;
            }
            else
            {

            }
            return (label);
        }

        //Get all child control with type T
        public static IEnumerable<T> GetChildren<T>(DependencyObject d) where T : DependencyObject
        {
            var count = VisualTreeHelper.GetChildrenCount(d);
            for (int i = 0; i < count; i++)
            {
                var c = VisualTreeHelper.GetChild(d, i);
                if (c is T)
                    yield return (T)c;
                foreach (var c1 in GetChildren<T>(c))
                    yield return c1;
            }
        }
        /// <summary>
        /// returns the logged in contact taken from the app
        /// </summary>
        /// <returns></returns>
        public static String ContactId()
        {
            return (((App)App.Current).contactId);
        }
    }

}